<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Lfof8qiDQ1mFN78AAAAASUVORK5CYII=
</value>
  </data>
</root>